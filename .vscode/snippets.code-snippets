{
	// Place your AoC workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Minimal template": {
		"scope": "typescript",
		"prefix": "puzzle",
		"body": [
"import { AoCPuzzle } from '../../lib/AoCPuzzle.js';",
"",
"export class $TM_FILENAME_BASE extends AoCPuzzle {",
"    sampleMode(): void { };",
"",
"    _loadData(lines: string[]) {",
"        ",
"    }",
"",
"    _runStep(): boolean {",
"        let moreToDo = this.stepNumber < this.lines.length;",
"        if (!moreToDo) {",
"            this.result = 'Result';",
"        }",
"        return moreToDo;",
"    }",
"}",
		]
	},
	"Grid based template": {
		"scope": "typescript",
		"prefix": "puzzle",
		"body": [
"import { Puzzle } from '../../lib/puzzle.js';",
"import { Grid, Pair } from '../../lib/grid.js';",
"",
"const puzzle = new Puzzle(process.argv[2]);",
"let grid = new Grid({x: 2, y: 2});",
"",
"await puzzle.run()",
"    .then((lines: Array<string>) => {",
"        lines.forEach((line) => {",
"        })",
"    });",
		]
	}
}
