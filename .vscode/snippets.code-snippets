{
	// Place your AoC workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Minimal template": {
		"scope": "typescript",
		"prefix": "puzzle",
		"body": [
"import { Puzzle } from \"../../lib/puzzle.js\";",
"",
"const puzzle = new Puzzle(process.argv[2]);",
"",
"puzzle.onLine = (line) => {",
"    console.log(line);",
"}",
"",
"puzzle.onClose = () => {",
"",
"}",
"",
"puzzle.run();"
		]
	},
	"Grid based template": {
		"scope": "typescript",
		"prefix": "puzzle",
		"body": [
"import { Puzzle } from '../../lib/puzzle.js';",
"",
"const puzzle = new Puzzle();",
"let gridSize = 128",
"let grid = Array.from({length: gridSize}, () => new Array<boolean>(gridSize).fill(false))",
"type Pair = {x: number, y: number};",
"function makeKey(p: Pair) { return `${p.x},${p.y}`;}",
"function isWall(p: Pair) { return grid[p.y][p.x]; }",
"function getNeighbors(node: string): Set<string> {",
"    let result = new Set<string>();",
"    let [x, y] = node.split(',').map(Number);",
"    puzzle.gridOrthogonalP({x,y},{x:gridSize,y:gridSize}).forEach((p) => {",
"        if (!isWall(p)) result.add(`${p.x},${p.y}`);",
"    })",
"    return result;",
"}",
"function debug() {",
"    for (let y=0; y<=6; y++) {",
"        let line = '';",
"        for (let x=0; x<10; x++) {",
"            line += isWall({x,y})?'#':'.'",
"       }",
"        console.log(line);",
"    }",
"}",
		]
	}
}
